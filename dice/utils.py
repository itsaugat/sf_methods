import pandas as pd
import numpy as np

def load_custom_data(data_desc):
    data = pd.read_csv('../datasets/'+data_desc+'.csv')
    data_sc = pd.read_csv('../datasets/'+data_desc+'_sc.csv')
    # y = np.array(data[target])
    # df_sub = data.loc[:, data.columns != target]
    # x = np.array(df_sub)

    return data, data_sc


def find_nearest_key(dictionary, target_value):
 # Use the min function with a custom key function
 nearest_key = min(dictionary, key=lambda key: abs(dictionary[key] - target_value))
 return nearest_key


categorical_embed = {'adult_income': {1: {'Without-pay': 0.017324792765636775,
  'Never-worked': 0.032483986435568955,
  'Other': 0.11998717137761922,
  'Private': 0.23723854431434338,
  'State-gov': 0.27538451379181966,
  'Self-emp-not-inc': 0.29481942564713876,
  'Local-gov': 0.29937525032316603,
  'Federal-gov': 0.38497831022789286,
  'Self-emp-inc': 0.5546677784976795},
 2: {'School': 0.06781777800273409,
  'High School': 0.1856248971100108,
  'Associates': 0.2587878225259045,
  'Bachelors': 0.41259349464816814,
  'Masters': 0.547978130684918,
  'Prof-School': 0.7288533895793379,
  'Doctorate': 0.7326547689615002},
 3: {'Never-Married': 0.05811495471754306,
  'Widowed': 0.08642038142716364,
  'Separated': 0.1057510649538709,
  'Married': 0.4832713460545632},
 4: {'Service': 0.04595611193641975,
  'Military': 0.12598718914845516,
  'Admin': 0.15115294535020268,
  'Blue-Collar': 0.18842907742711015,
  'Other': 0.21283775087264106,
  'Sales': 0.28228183825231207,
  'Professional': 0.45058545903924474,
  'White-Collar': 0.48032584145028573},
 5: {'Own-child': 0.018714488561904438,
  'Other-relative': 0.03968037475131475,
  'Unmarried': 0.06953165718110371,
  'Not-in-family': 0.11778179016343256,
  'Wife': 0.47091746801295514,
  'Husband': 0.49237991294760675},
 6: {'Other': 0.09286717607163437,
  'Amer-Indian-Eskimo': 0.11811033189408648,
  'Black': 0.1308857688205829,
  'Asian-Pac-Islander': 0.26691775061979184,
  'White': 0.28048908270457257},
 7: {'Female': 0.1218747190991326, 'Male': 0.3349970832009475},
 11: {'Latin-America': 0.06877842293096778,
  'South-America': 0.07705299951555603,
  'Euro_2': 0.19753366160495228,
  'SE-Asia': 0.2461002260738508,
  'United-States': 0.2678560316430807,
  'Other': 0.27294557091923066,
  'China': 0.3146930060645208,
  'Euro_1': 0.337177891665911,
  'British-Commonwealth': 0.3379247028573042,
  'Yugoslavia': 0.36822775832262067}},

  'blood_alcohol':{0: {'Female': 0.5046101778656127, 'Male': 0.8299651515151515},
 1: {'No': 0.6450204795204795, 'Yes': 0.6859795204795204}},

  'default_credit_card':{1: {'Male': 0.7583294473883422, 'Female': 0.792236448959311},
 2: {'High School': 0.7484300122000813,
  'University': 0.7626526120732663,
  'Graduate School': 0.8076496126960137,
  'Others': 0.9291658848614073},
 3: {'Others': 0.7639650793650793,
  'Married': 0.765283953147877,
  'Single': 0.7907158659567805},
 5: {'Four Month Delay': 0.24389721362229103,
  'Eight Month Delay': 0.27788,
  'Three Month Delay': 0.3087626686656672,
  'Five Month Delay': 0.3218025974025974,
  'Nine and more Month Delay': 0.43894,
  'Seven Month Delay': 0.4815666666666667,
  'Six Month Delay': 0.510325925925926,
  'Two Month Delay': 0.6605526701002982,
  'Pay Duly': 0.8438052095666588,
  'One Month Delay': 0.8718807707965802},
 6: {'Seven Month Delay': 0.29067692307692305,
  'Four Month Delay': 0.38464464831804285,
  'Six Month Delay': 0.4145692307692308,
  'Eight Month Delay': 0.41803809523809526,
  'Three Month Delay': 0.44393553971486766,
  'Five Month Delay': 0.49778799999999995,
  'Two Month Delay': 0.8199586206896552,
  'Pay Duly': 0.8314633174005899,
  'One Month Delay': 0.8408733583370415,
  'Nine and more Month Delay': 0.8894},
 7: {'Eight Month Delay': 0.2063857142857143,
  'Seven Month Delay': 0.40745000000000003,
  'Five Month Delay': 0.42569870129870124,
  'Four Month Delay': 0.4264680497925311,
  'Six Month Delay': 0.4444909090909091,
  'Nine and more Month Delay': 0.4447,
  'Three Month Delay': 0.4844970680628272,
  'Two Month Delay': 0.75576,
  'One Month Delay': 0.8254854931810973,
  'Pay Duly': 0.8320808858739026},
 8: {'Eight Month Delay': 0.18269152542372882,
  'Five Month Delay': 0.33969714285714286,
  'Four Month Delay': 0.39104309392265196,
  'Three Month Delay': 0.4768287341772152,
  'Six Month Delay': 0.49385555555555555,
  'Two Month Delay': 0.5929333333333333,
  'Nine and more Month Delay': 0.5929333333333333,
  'Seven Month Delay': 0.6298,
  'One Month Delay': 0.8167099416626155,
  'Pay Duly': 0.8265024711040255},
 9: {'Eight Month Delay': 0.18269152542372882,
  'Seven Month Delay': 0.35575999999999997,
  'Four Month Delay': 0.3674793296089386,
  'Nine and more Month Delay': 0.3894,
  'Five Month Delay': 0.39739764705882347,
  'Six Month Delay': 0.43215555555555557,
  'Three Month Delay': 0.45823326988960794,
  'One Month Delay': 0.8114691291007788,
  'Pay Duly': 0.8223060479873091},
 10: {'Eight Month Delay': 0.18678297872340427,
  'Nine and more Month Delay': 0.2596,
  'Seven Month Delay': 0.28894000000000003,
  'Four Month Delay': 0.3609664864864865,
  'Five Month Delay': 0.375576,
  'Six Month Delay': 0.4842,
  'Three Month Delay': 0.4935955186122154,
  'One Month Delay': 0.8115539264444035,
  'Pay Duly': 0.8160754795035727}},

  'diabetes':{},

  'german_credit': {0: {'<0': 0.508,
  '0<=X<200': 0.61,
  '>=200': 0.7765625,
  'no checking': 0.8827848101265823},
 2: {'no credits/all paid': 0.3829268292682927,
  'all paid': 0.434,
  'existing paid': 0.6811676082862523,
  'delayed previously': 0.6820224719101123,
  'critical/other existing credit': 0.8289115646258503},
 3: {'education': 0.5627450980392157,
  'other': 0.5923076923076923,
  'new car': 0.62,
  'repairs': 0.6391304347826087,
  'business': 0.65,
  'domestic appliance': 0.6692307692307692,
  'furniture/equipment': 0.6796703296703297,
  'radio/tv': 0.7782918149466191,
  'used car': 0.8336538461538462,
  'retraining': 0.8699999999999999},
 5: {'<100': 0.6402317880794702,
  '100<=X<500': 0.6701923076923078,
  '500<=X<1000': 0.8234375,
  'no known savings': 0.8244565217391304,
  '>=1000': 0.8714285714285714},
 6: {'<1': 0.5936416184971098,
  'unemployed': 0.6301587301587303,
  '1<=X<4': 0.6932352941176471,
  '>=7': 0.7468503937007873,
  '4<=X<7': 0.7754285714285714},
 8: {'male div/sep': 0.6019607843137255,
  'female div/dep/mar': 0.6485530546623793,
  'male mar/wid': 0.7279569892473119,
  'male single': 0.7335154826958106},
 9: {'co applicant': 0.5642857142857143,
  'none': 0.7001101321585903,
  'guarantor': 0.8056603773584906},
 11: {'no known property': 0.5658064516129032,
  'car': 0.6927927927927927,
  'life insurance': 0.6939914163090128,
  'real estate': 0.7869257950530035},
 13: {'bank': 0.5907142857142857,
  'stores': 0.5979166666666667,
  'none': 0.7247852760736196},
 14: {'for free': 0.5935779816513762,
  'rent': 0.6094444444444445,
  'own': 0.7390756302521009},
 16: {'high qualif/self emp/mgmt': 0.6557046979865772,
  'unemp/unskilled non res': 0.6826086956521739,
  'skilled': 0.7047543581616481,
  'unskilled resident': 0.7199004975124378},
 18: {'none': 0.6862646566164153, 'yes': 0.7202469135802468},
 19: {'yes': 0.6926348547717843, 'no': 0.886842105263158}},

 'heloc': {},

 'lending_club': {4: {'G': 0.6758203017536843,
  'F': 0.6842241240384951,
  'E': 0.7403014547952216,
  'D': 0.7840153306764767,
  'C': 0.8305604725954356,
  'B': 0.8796073688144751,
  'A': 0.9401744594284303},
 5: {'OTHER': 0.8167266075469649,
  'RENT': 0.8479217704593721,
  'OWN': 0.853039265152575,
  'MORTGAGE': 0.8652558449242485,
  'NONE': 0.9639835367873799},
 6: {'small_business': 0.7350339088186698,
  'renewable_energy': 0.8159224437225916,
  'educational': 0.8277789391016857,
  'other': 0.8387140513324403,
  'house': 0.8414368207698378,
  'moving': 0.8419484290688671,
  'medical': 0.8463906427599848,
  'debt_consolidation': 0.8483945312801235,
  'vacation': 0.8597781903618721,
  'home_improvement': 0.8816460793719151,
  'credit_card': 0.8926247654416287,
  'car': 0.8958073742011383,
  'wedding': 0.8979362358249995,
  'major_purchase': 0.89833223530762},
 7: {'NE': 0.4759890245249199,
  'NV': 0.7772570084635705,
  'SD': 0.8072370499547543,
  'AK': 0.8106991768393691,
  'FL': 0.8207604705986419,
  'MO': 0.8318938647233424,
  'HI': 0.8363717101578461,
  'ID': 0.8365620210213599,
  'UT': 0.8392809927623028,
  'OR': 0.8394039145533849,
  'CA': 0.8395243149569203,
  'NM': 0.8396592241869656,
  'MD': 0.8434317986057097,
  'GA': 0.84432412022225,
  'NJ': 0.8469994178848441,
  'WA': 0.8471826131576315,
  'NH': 0.8520937302773501,
  'NC': 0.8525270467017435,
  'MI': 0.85515428949534,
  'AZ': 0.8558248089252875,
  'KY': 0.8589247942098422,
  'SC': 0.8592679449939351,
  'WI': 0.8593673366306226,
  'OK': 0.8609997775241538,
  'MN': 0.8674116571031854,
  'NY': 0.8680467909965823,
  'MT': 0.8688933429076415,
  'IL': 0.8692118377208908,
  'OH': 0.8710356892328758,
  'VA': 0.8718388015447119,
  'CT': 0.872606135517117,
  'RI': 0.8730097684199472,
  'CO': 0.8740127524353651,
  'LA': 0.8772654368294446,
  'AL': 0.877778632386342,
  'MA': 0.8782899804736779,
  'PA': 0.8790760575081106,
  'WV': 0.8791767665551401,
  'TN': 0.8808852303971955,
  'TX': 0.8817546995728601,
  'KS': 0.8829170456659756,
  'AR': 0.8841807989594631,
  'VT': 0.886221002724991,
  'MS': 0.892796707357476,
  'DE': 0.8943994273665176,
  'DC': 0.9292333371362127,
  'WY': 0.950665882704161,
  'ME': 0.9639835367873799,
  'IA': 0.97598902452492,
  'IN': 0.9855934147149519}}}


def actionability_constraints(dataset):
 meta_action_data = {}
 if dataset == 'lending_club':
  #### increasing means "increasing" probability of positive prediction -> 'getting loan'
  #### based on common sense actionable directions

  meta_action_data = {
   'emp_length': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': True,
                      'can_decrease': False},

   'annual_inc': {'actionable': True,
                  'min': 0,
                  'max': 1,
                  'can_increase': True,
                  'can_decrease': False},

   'open_acc': {'actionable': True,
                  'min': 0,
                  'max': 1,
                  'can_increase': True,
                  'can_decrease': False},

   'grade': {'actionable': False,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': False},

   'cr_history_yrs': {'actionable': True,
           'min': 0,
           'max': 1,
           'can_increase': True,
           'can_decrease': False},

   'home_ownership': {'actionable': True,
                            'min': 0,
                            'max': 1,
                            'can_increase': False,
                            'can_decrease': True},

   'purpose': {'actionable': False,
               'min': 0,
               'max': 1,
               'can_increase': False,
               'can_decrease': False},

   'addr_state': {'actionable': False,
                 'min': 0,
                 'max': 1,
                 'can_increase': False,
                 'can_decrease': False}
  }

 elif dataset == 'adult_income':
  #### increasing means "increasing" probability of positive prediction -> '>50k'
  # can increase True -> it increase the probability of earning >50k
  # can decrease True -> it increase the probability of earning >50k
  meta_action_data = {
   'age': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False},
   'workclass': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'education': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'marital_status': {'actionable': False,
                      'min': 0,
                      'max': 1,
                      'can_increase': False,
                      'can_decrease': False},
   'occupation': {'actionable': True,
                  'min': 0,
                  'max': 1,
                  'can_increase': True,
                  'can_decrease': False},
   'relationship': {'actionable': False,
                    'min': 0,
                    'max': 1,
                    'can_increase': False,
                    'can_decrease': False},
   'race': {'actionable': False,
            'min': 0,
            'max': 1,
            'can_increase': False,
            'can_decrease': False},
   'sex': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False},
   'capital_gain': {'actionable': True,
                    'min': 0,
                    'max': 1,
                    'can_increase': True,
                    'can_decrease': False},
   'capital_loss': {'actionable': True,
                    'min': 0,
                    'max': 1,
                    'can_increase': False,
                    'can_decrease': True},
   'hours_per_week': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': True,
                      'can_decrease': False},
   'country': {'actionable': False,
               'min': 0,
               'max': 1,
               'can_increase': False,
               'can_decrease': False}

  }

 elif dataset == 'blood_alcohol':
  #### increasing means "increasing" probability of positive prediction -> 'under the limit'
  # can increase True -> it increase the probability of being under the limit
  # can decrease True -> it increase the probability of being under the limit
  meta_action_data = {
   'gender': {'actionable': False,
              'min': 0,
              'max': 1,
              'can_increase': False,
              'can_decrease': False},
   'meal': {'actionable': False,
            'min': 0,
            'max': 1,
            'can_increase': False,
            'can_decrease': False},
   'units_consumed': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': False,
                      'can_decrease': True},
   'weight': {'actionable': False,
              'min': 0,
              'max': 1,
              'can_increase': False,
              'can_decrease': False},
   'duration': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False}}

 elif dataset == 'diabetes':
  #### increasing means "increasing" probability of positive prediction -> 'not having diabetes'
  # can increase True -> it increase the probability of not having diabetes
  # can decrease True -> it increase the probability of not having diabetes
  meta_action_data = {
   'Pregnancies': {'actionable': False,
                   'min': 0,
                   'max': 1,
                   'can_increase': False,
                   'can_decrease': False},
   'Glucose': {'actionable': True,
               'min': 0,
               'max': 1,
               'can_increase': False,
               'can_decrease': True},
   'BloodPressure': {'actionable': True,
                     'min': 0,
                     'max': 1,
                     'can_increase': False,
                     'can_decrease': True},
   'SkinThickness': {'actionable': True,
                     'min': 0,
                     'max': 1,
                     'can_increase': False,
                     'can_decrease': True},
   'Insulin': {'actionable': True,
               'min': 0,
               'max': 1,
               'can_increase': False,
               'can_decrease': True},
   'BMI': {'actionable': True,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': True},
   'DiabetesPedigreeFunction': {'actionable': True,
                                'min': 0,
                                'max': 1,
                                'can_increase': False,
                                'can_decrease': True},
   'Age': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False}}

 elif dataset == 'default_credit_card':
  #### increasing means "increasing" probability of positive prediction -> 'not default payment next month'
  # can increase True -> it increase the probability of not defaulting
  # can decrease True -> it increase the probability of not defaulting
  meta_action_data = {
   'LIMIT_BAL': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': False,
                 'can_decrease': True},
   'SEX': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False},
   'EDUCATION': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'MARRIAGE': {'actionable': False,
                'min': 0,
                'max': 1,
                'can_increase': False,
                'can_decrease': False},
   'AGE': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False},
   'PAY_1': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'PAY_2': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'PAY_3': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'PAY_4': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'PAY_5': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'PAY_6': {'actionable': True,
             'min': 0,
             'max': 1,
             'can_increase': False,
             'can_decrease': True},
   'BILL_AMT1': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'BILL_AMT2': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'BILL_AMT3': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'BILL_AMT4': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'BILL_AMT5': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'BILL_AMT6': {'actionable': True,
                 'min': 0,
                 'max': 1,
                 'can_increase': True,
                 'can_decrease': False},
   'PAY_AMT1': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'PAY_AMT2': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'PAY_AMT3': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'PAY_AMT4': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'PAY_AMT5': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'PAY_AMT6': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False}
  }

 elif dataset == 'german_credit':
  #### increasing means "increasing" probability of positive prediction -> 'good credit'
  # can increase True -> it increase the probability of good credit
  # can decrease True -> it increase the probability of good credit
  meta_action_data = {
   'checking_status': {'actionable': True,
                       'min': 0,
                       'max': 1,
                       'can_increase': True,
                       'can_decrease': False},
   'duration': {'actionable': True,
                'min': 0,
                'max': 1,
                'can_increase': True,
                'can_decrease': False},
   'credit_history': {'actionable': False,
                      'min': 0,
                      'max': 1,
                      'can_increase': False,
                      'can_decrease': False},
   'purpose': {'actionable': True,
               'min': 0,
               'max': 1,
               'can_increase': False,
               'can_decrease': True},
   'credit_amount': {'actionable': True,
                     'min': 0,
                     'max': 1,
                     'can_increase': True,
                     'can_decrease': False},
   'savings_status': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': True,
                      'can_decrease': False},
   'employment': {'actionable': False,
                  'min': 0,
                  'max': 1,
                  'can_increase': False,
                  'can_decrease': False},
   'installment_commitment': {'actionable': True,
                              'min': 0,
                              'max': 1,
                              'can_increase': True,
                              'can_decrease': False},
   'personal_status': {'actionable': False,
                       'min': 0,
                       'max': 1,
                       'can_increase': False,
                       'can_decrease': False},
   'other_parties': {'actionable': True,
                     'min': 0,
                     'max': 1,
                     'can_increase': True,
                     'can_decrease': False},
   'residence_since': {'actionable': False,
                       'min': 0,
                       'max': 1,
                       'can_increase': False,
                       'can_decrease': False},
   'property_magnitude': {'actionable': True,
                          'min': 0,
                          'max': 1,
                          'can_increase': True,
                          'can_decrease': False},
   'age': {'actionable': False,
           'min': 0,
           'max': 1,
           'can_increase': False,
           'can_decrease': False},
   'other_payment_plans': {'actionable': True,
                           'min': 0,
                           'max': 1,
                           'can_increase': False,
                           'can_decrease': True},
   'housing': {'actionable': True,
               'min': 0,
               'max': 1,
               'can_increase': True,
               'can_decrease': False},
   'existing_credits': {'actionable': True,
                        'min': 0,
                        'max': 1,
                        'can_increase': True,
                        'can_decrease': False},
   'job': {'actionable': True,
           'min': 0,
           'max': 1,
           'can_increase': True,
           'can_decrease': False},
   'num_dependents': {'actionable': False,
                      'min': 0,
                      'max': 1,
                      'can_increase': False,
                      'can_decrease': False},
   'own_telephone': {'actionable': True,
                     'min': 0,
                     'max': 1,
                     'can_increase': False,
                     'can_decrease': True},
   'foreign_worker': {'actionable': False,
                      'min': 0,
                      'max': 1,
                      'can_increase': False,
                      'can_decrease': False}

  }

 elif dataset == 'heloc':
  #### increasing means "increasing" probability of positive prediction -> 'repay heloc (good)'
  # can increase True -> it increase the probability of 'repay heloc (good)'
  # can decrease True -> it increase the probability of 'repay heloc (good)'
  # https://github.com/Trusted-AI/AIX360/blob/master/examples/tutorials/HELOC.ipynb
  # monotonically decreasing -> if value of variable increases, the probability of being 'good' increases
  meta_action_data = {
   'ExternalRiskEstimate': {'actionable': True,
                            'min': 0,
                            'max': 1,
                            'can_increase': True,
                            'can_decrease': False},
   'MSinceOldestTradeOpen': {'actionable': True,
                             'min': 0,
                             'max': 1,
                             'can_increase': True,
                             'can_decrease': False},
   'MSinceMostRecentTradeOpen': {'actionable': True,
                                 'min': 0,
                                 'max': 1,
                                 'can_increase': True,
                                 'can_decrease': False},
   'AverageMInFile': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': True,
                      'can_decrease': False},
   'NumSatisfactoryTrades': {'actionable': True,
                             'min': 0,
                             'max': 1,
                             'can_increase': True,
                             'can_decrease': False},
   'NumTrades60Ever2DerogPubRec': {'actionable': True,
                                   'min': 0,
                                   'max': 1,
                                   'can_increase': True,
                                   'can_decrease': False},
   'NumTrades90Ever2DerogPubRec': {'actionable': True,
                                   'min': 0,
                                   'max': 1,
                                   'can_increase': True,
                                   'can_decrease': False},
   'PercentTradesNeverDelq': {'actionable': True,
                              'min': 0,
                              'max': 1,
                              'can_increase': True,
                              'can_decrease': False},
   'MaxDelq2PublicRecLast12M': {'actionable': True,
                                'min': 0,
                                'max': 1,
                                'can_increase': True,
                                'can_decrease': False},
   'MaxDelqEver': {'actionable': True,
                   'min': 0,
                   'max': 1,
                   'can_increase': True,
                   'can_decrease': False},
   'NumTotalTrades': {'actionable': True,
                      'min': 0,
                      'max': 1,
                      'can_increase': True,
                      'can_decrease': False},
   'NumTradesOpeninLast12M': {'actionable': True,
                              'min': 0,
                              'max': 1,
                              'can_increase': False,
                              'can_decrease': True},
   'PercentInstallTrades': {'actionable': True,
                            'min': 0,
                            'max': 1,
                            'can_increase': True,
                            'can_decrease': False},
   'NumInqLast6M': {'actionable': True,
                    'min': 0,
                    'max': 1,
                    'can_increase': False,
                    'can_decrease': True},
   'NumInqLast6Mexcl7days': {'actionable': True,
                             'min': 0,
                             'max': 1,
                             'can_increase': False,
                             'can_decrease': True},
   'NetFractionRevolvingBurden': {'actionable': True,
                                  'min': 0,
                                  'max': 1,
                                  'can_increase': False,
                                  'can_decrease': True},
   'NumRevolvingTradesWBalance': {'actionable': True,
                                  'min': 0,
                                  'max': 1,
                                  'can_increase': True,
                                  'can_decrease': False},
   'NumInstallTradesWBalance': {'actionable': True,
                                'min': 0,
                                'max': 1,
                                'can_increase': True,
                                'can_decrease': False},
   'NumBank2NatlTradesWHighUtilization': {'actionable': True,
                                          'min': 0,
                                          'max': 1,
                                          'can_increase': False,
                                          'can_decrease': True},
   'PercentTradesWBalance': {'actionable': True,
                             'min': 0,
                             'max': 1,
                             'can_increase': True,
                             'can_decrease': False}
  }
 return meta_action_data